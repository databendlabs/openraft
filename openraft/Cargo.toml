[package]
name = "openraft"
readme = "../README.md"

version       = { workspace = true }
edition       = { workspace = true }
authors       = { workspace = true }
categories    = { workspace = true }
description   = { workspace = true }
documentation = { workspace = true }
homepage      = { workspace = true }
keywords      = { workspace = true }
license       = { workspace = true }
repository    = { workspace = true }

[dependencies]
anyerror        = { workspace = true }
async-trait     = { workspace = true }
anyhow          = { workspace = true, optional = true }
byte-unit       = { workspace = true }
derive_more     = { workspace = true }
futures         = { workspace = true }
macros          = { path = "../macros" }
maplit          = { workspace = true }
pin-utils       = { workspace = true }
rand            = { workspace = true }
serde           = { workspace = true, optional = true }
serde_json      = { workspace = true, optional = true }
clap            = { workspace = true }
tempfile        = { workspace = true, optional = true }
thiserror       = { workspace = true }
tokio           = { workspace = true }
tracing         = { workspace = true }
tracing-futures = { workspace = true }

or07 = { package = "openraft", version = "0.7.4", optional = true }

[dev-dependencies]
anyhow             = { workspace = true }
async-entry        = { workspace = true }
pretty_assertions  = { workspace = true }
serde_json         = { workspace = true }


[features]

# Enables benchmarks in unittest.
#
# Benchmark in openraft depends on the unstable feature `test` thus it can not be used with stable rust.
# In order to run the benchmark with stable toolchain,
# the unstable features have to be enabled explicitly with environment variable `RUSTC_BOOTSTRAP=1`.
bench = []

# Enable backtrace when generating an error.
# Stable rust does not support backtrace.
bt  = ["anyerror/backtrace", "anyhow/backtrace"]

# Add serde::Serialize and serde:Deserialize bound to data types.
# If you'd like to use `serde` to serialize messages.
serde = ["dep:serde"]

# Turn on this feature it allows at most ONE quorum-granted leader for each term.
# This is the way standard raft does, by making the LeaderId a partial order value.
#
# - With this feature on:
#   It is more likely to conflict during election. But every log only needs to store one `term` in it.
#
# - With this feature off:
#   Election conflict rate will be reduced, but every log has to store a `LeaderId{ term, node_id}`,
#   which may be costly if an application uses a big NodeId type.
#
# This feature is disabled by default.
single-term-leader = []

# Provide basic compatible types
compat = []

# Turn on to let openraft provide additional data types to build v0.7 compatible RaftStorage.
compat-07 = ["compat", "serde", "dep:or07", "compat-07-testing"]
compat-07-testing = ["dep:tempfile", "anyhow", "dep:serde_json"]

# Allows an application to implement a custom the v2 storage API.
# See `openraft::storage::v2` for more details.
# V2 API are unstable and may change in the future.
storage-v2 = []

# Disallows applications to share a raft instance with multiple threads.
singlethreaded = ["macros/singlethreaded"]

# default = ["single-term-leader"]

[package.metadata.docs.rs]

# Enable this flag to show all types/mods, including the feature enabled ones on docs.rs
all-features = true

# Sort modules by appearance order for crate `docs`.
# https://doc.rust-lang.org/rustdoc/unstable-features.html#--sort-modules-by-appearance-control-how-items-on-module-pages-are-sorted
rustdoc-args = ["-Z", "unstable-options", "--sort-modules-by-appearance"]
